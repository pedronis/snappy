summary: Ensure that commands run when their core provided interfaces are connected

details: |
    Install a test snap that plugs as many core provided interfaces as is 
    possible and verify the command can run (ie, don't test the interface 
    functionality itself). This will help catch things like AppArmor 
    policy syntax errors, seccomp policy parsing, udev querying bugs, etc.

# Ideally we would run this everywhere, but on systems with full security
# support, it takes a while, which leads to travis timeouts. Limit to:
# - Ubuntu Core 16 amd64
# - Ubuntu classic 14.04 i386 VM
# - Ubuntu classic 16.04 amd64 VM
# - Ubuntu classic 18.04 amd64 VM
# - All Ubuntu autopkgtests
# - Debian sid amd64 VM
# - Debian 9 amd64 VM
# - TODO: All Fedora systems (for classic-only; unrelated error elsewhere)
systems: [ubuntu-core-16-64, ubuntu-14.04-32, ubuntu-16.04-64, ubuntu-18.04-64, ubuntu-18.04-32, ubuntu-*-amd64, ubuntu-*-armhf, ubuntu-*-arm64, ubuntu-*-i386, ubuntu-*-ppc64el, debian-*]

# memory issue inside the adt environment
backends: [-autopkgtest]

# Start early as it takes a long time.
priority: 100

environment:
    CONSUMER_SNAP: test-snapd-policy-app-consumer

debug: |
    # shellcheck source=tests/lib/journalctl.sh
    . "$TESTSLIB/journalctl.sh"

    # get the full journal to see any out-of-memory errors
    # shellcheck disable=SC2119
    get_journalctl_log

    cat check.out

execute: |
    #shellcheck source=tests/lib/dirs.sh
    . "$TESTSLIB"/dirs.sh

    # shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB/systems.sh"

    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh

    echo "Given a snap is installed"
    install_local "$CONSUMER_SNAP"

    cp ./file_reachability.py "/var/snap/$CONSUMER_SNAP/common"

    # capture accesses from the base AA template
    ./file_reachability.py gen --template /snap/core/current /var/lib/snapd/apparmor/profiles/snap.test-snapd-policy-app-consumer.snapd-control templ.json 2>>warns

    # test them
    test-snapd-policy-app-consumer.snapd-control -c '$SNAP_COMMON/file_reachability.py check' <templ.json >check.out
    # no output expected
    ! test -s check.out

    echo "For each core-provided slot"
    for plugcmd in "$SNAP_MOUNT_DIR"/bin/"$CONSUMER_SNAP".* ; do
        plugcmd_bn=$(basename "$plugcmd")
        plug_iface=$(echo "$plugcmd_bn" | tr '.' ':')
        #shellcheck disable=SC2001
        slot_iface=$(echo "$plug_iface" | sed "s/$CONSUMER_SNAP//")

        # we test browser-support two different ways, so account for that
        if [ "$plug_iface" = "$CONSUMER_SNAP:browser-sandbox" ]; then
            slot_iface=":browser-support"
        fi

        CONNECTED_PATTERN="$slot_iface +.*$CONSUMER_SNAP"
        DISCONNECTED_PATTERN="$slot_iface +-"

        # Skip any interfaces that core doesn't ship
        if ! snap interfaces | grep -E -q "$slot_iface +"; then
            echo "$slot_iface not present, skipping"
            continue
        fi

        echo "When slot $slot_iface is connected"
        if snap interfaces | grep -E -q "$DISCONNECTED_PATTERN"; then
            if [ "$slot_iface" = ":broadcom-asic-control" ] || [ "$slot_iface" = ":firewall-control" ] || [ "$slot_iface" = ":kubernetes-support" ] || [ "$slot_iface" = ":openvswitch-support" ] || [ "$slot_iface" = ":ppp" ]; then
                # TODO: when the kmod backend no longer fails on missing
                # modules, we can remove this
                snap connect "$plug_iface" "$slot_iface" || true
            else
                snap connect "$plug_iface" "$slot_iface"
            fi
        fi
        snap interfaces | MATCH "$CONNECTED_PATTERN"

        echo "Then $plugcmd should succeed"
        "$plugcmd" | MATCH PASS

        echo "Check allowed files reachability"
        ./file_reachability.py gen /snap/core/current "/var/lib/snapd/apparmor/profiles/snap.${plugcmd_bn}" checks.json 2>warns1
        "$plugcmd" -c '$SNAP_COMMON/file_reachability.py check' <checks.json >check1.out

        if [ -s warns1 ] ; then
            echo "$plug_iface" >> warns
            cat warns1 >> warns
        fi

        if [ -s check1.out ] ; then
            echo "$plug_iface" >> check.out
            cat check1.out >> check.out
        fi

    done

    ! test -s check.out

restore: |
    # Remove the snaps to avoid timeout in next test
    snap remove "$CONSUMER_SNAP"
